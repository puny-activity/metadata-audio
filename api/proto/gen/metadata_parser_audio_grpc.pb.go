// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/proto/src/metadata_parser_audio.proto

package metadataparseraudio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetadataParser_Extract_FullMethodName = "/metadata.MetadataParser/Extract"
)

// MetadataParserClient is the client API for MetadataParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataParserClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
}

type metadataParserClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataParserClient(cc grpc.ClientConnInterface) MetadataParserClient {
	return &metadataParserClient{cc}
}

func (c *metadataParserClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, MetadataParser_Extract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataParserServer is the server API for MetadataParser service.
// All implementations must embed UnimplementedMetadataParserServer
// for forward compatibility.
type MetadataParserServer interface {
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	mustEmbedUnimplementedMetadataParserServer()
}

// UnimplementedMetadataParserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataParserServer struct{}

func (UnimplementedMetadataParserServer) Extract(context.Context, *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedMetadataParserServer) mustEmbedUnimplementedMetadataParserServer() {}
func (UnimplementedMetadataParserServer) testEmbeddedByValue()                        {}

// UnsafeMetadataParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataParserServer will
// result in compilation errors.
type UnsafeMetadataParserServer interface {
	mustEmbedUnimplementedMetadataParserServer()
}

func RegisterMetadataParserServer(s grpc.ServiceRegistrar, srv MetadataParserServer) {
	// If the following call pancis, it indicates UnimplementedMetadataParserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetadataParser_ServiceDesc, srv)
}

func _MetadataParser_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataParserServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataParser_Extract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataParserServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataParser_ServiceDesc is the grpc.ServiceDesc for MetadataParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.MetadataParser",
	HandlerType: (*MetadataParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _MetadataParser_Extract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/src/metadata_parser_audio.proto",
}
